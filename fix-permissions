#!/usr/bin/env bash

# Recursively set permissions
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Recursively changes file and directory permissions, owner and group.
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#      the Free Software Foundation, either version 3 of the License, or
#                     (at your option) any later version.
#
#       This program is distributed in the hope that it will be useful,
#        but WITHOUT ANY WARRANTY; without even the implied warranty of
#        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#                 GNU General Public License for more details.
#
#      You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#_______________________________________________________________________________


#set -e                         # exit on first error
#set -x                         # debug mode


THIS_SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
EXTERNAL_CONFIG_FILE="${THIS_SCRIPT_PATH}/fix-permissions_config"
if [ -f "$EXTERNAL_CONFIG_FILE" ]
then
    printf "Using external configuration: \"${EXTERNAL_CONFIG_FILE}\" ..\n"
    . "$EXTERNAL_CONFIG_FILE"
else
    printf "Using default configuration (!)\n"
fi

#                       OWNER   GROUP   OTHER
# DIRECTORIES: 775  ->  R W X   R W X   R   X
#       FILES: 664  ->  R W     R W     R

[ -z "$CHMOD_DIRS" ]  && CHMOD_DIRS="775"
[ -z "$CHMOD_FILE" ]  && CHMOD_FILE="664"
[ -z "$CHOWN_USER" ]  && CHOWN_USER="spock"
[ -z "$CHOWN_GROUP" ] && CHOWN_GROUP="spock"


function msg_error()
{
    printf "[ERROR] %s\n" "$*" >&2
}

function msg_argerr()
{
    msg_error "${1}: \"${2}\""
}

function msg_usage()
{
    printf "\nUSAGE: $(basename "$0") [PATH]\n"
    printf "\nModifies owner, group and permissions for PATH recursively using options:\n"
    FMT="  %-30.30s: %s\n"
    printf "$FMT" "chown (owner, group)"       "[${CHOWN_USER}] [${CHOWN_GROUP}]"
    printf "$FMT" "chmod (directories, files)" "[${CHMOD_DIRS}] [${CHMOD_FILE}]"
    printf "\nNote that this script should be executed with elevated privileges.\n"
}

if [ $# -eq 0 ]
then
    msg_usage
    exit 1
fi

path="${1%/}"
[ -z "$path" ] && { msg_argerr "Got null argument" "$path" ; exit 1 ; }
[ -e "$path" ] || { msg_argerr "Does not exist"    "$path" ; exit 1 ; }
[ -d "$path" ] || { msg_argerr "Not a directory"   "$path" ; exit 1 ; }

printf "Using path: \"${path}\"\n"
read -rsp $'Press any key to continue .. (ctrl-c aborts)\n' -n 1 key

printf "\nChowning directories and files .."
chown -R "${CHOWN_USER}:${CHOWN_GROUP}" "${path}"
printf " [OK]\n"

printf "Chmodding directories .. "
find "$path" -xdev -type d -exec chmod $CHMOD_DIRS '{}' \;
[ $? -eq 0 ] && printf "[OK]\n"

printf "Chmodding files .. "
find "$path" -xdev -type f -exec chmod $CHMOD_FILE '{}' \;
[ $? -eq 0 ] && printf "[OK]\n"

[ -n ${SECONDS} ] && printf "\nTotal execution time: ${SECONDS} seconds\n"

exit $?
