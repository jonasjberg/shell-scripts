#!/usr/bin/env bash

# www2png -- cutycapt wrapper
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Convert html to jpg/png/pdf/.. etc., with cutycapt.
#
# Copyright (C) 2015 Jonas Sj√∂berg
# https://github.com/jonasjberg

# Restricts what cutycapt can do to just this one thing.
# Converts a webpage to a image, like taking a "print screen" of an entire
# webpage, useful for capturing whole forum threads etc..
# usage: www2png <URL> <TARGET>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# ------------------------------------------------------------------------------

# Use these settings when running cutycapt:
FLAGS="--out-format=png --javascript=off --java=off"

# ------------------------------------------------------------------------------

set -e                         # Exit immediately if a command returns non-zero.

URL=${1}                        # The URL to capture (http:...|file:...|...)
TARGET=${2}                     # The target file (.png|pdf|ps|svg|jpeg|...)

PROGNAME=$(basename $0)         # Name of this script


die()
{
    if [[ ! -z ${1} ]];
    then
        printf "%s: %s\n\n" "$PROGNAME" "$1" 1>&2
    fi
    exit 1
}

usage()
{
    printf "usage: %s <URL> <TARGET>\n\n" "$PROGNAME"
    printf "       <URL>       The URL to capture (http:...|file:...|...)\n"
    printf "       <TARGET>    The target file (.png|pdf|ps|svg|jpeg|...)\n\n"
    printf "       Target is optional and defaults to using whatever comes\n"
    printf "       after the last \'/\' in the URL with '.png' appended.\n"

    die
}


if ! command -v "cutycapt" >/dev/null; then # make sure cutycapt is available
    die "Can not execute cutycapt! Is it installed? Is it in your \$PATH?"
fi


if [[ ${URL} && ${URL-x} ]];                # is URL set?
then
    if [[ ${TARGET} && ${TARGET-x} ]];      # is TARGET set?
    then
        # <TARGET> IS set.
        echo "Saving to \"$TARGET\""
    else
        # <TARGET> is NOT set. Extract last part of URL and append '.png'
        URL=${URL%/}                        # Remove trailing slash if present
        URL_tail="$(echo ${URL##*/})"       # Get everything after the last '/'

        # Remove non-alphanumeric chars
        URL_tail_alphanumeric=$(echo $URL_tail | sed 's/[^a-zA-Z0-9_-]/-/g')

        # Remove any dashes and underlines if first or last in name
        URL_slugify=$(echo $URL_tail_alphanumeric | sed -r 's/^[_-]+//g')
        URL_slugifying=$(echo $URL_slugify | sed -r 's/[_-]+$//g')

        # Replace '--' with '_'
        URL_slugified=$(echo $URL_slugifying | sed 's/--/_/g')

        # Append file extension
        TARGET="${URL_slugified}.png"

        echo "Using default target \"$TARGET\""
    fi

    if [[ ! -e ${TARGET} ]];                # does TARGET exist?
    then
        printf "Running cutycapt.."

        cutycapt ${FLAGS} --url="${URL}" --out="${TARGET}"

        printf " DONE!\n"
        exit 0
    else
        die "Output file already exists!"
    fi
else
    # <URL> must be set. Display usage and exit.
    usage
fi

