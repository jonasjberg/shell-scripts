#!/bin/bash

# GIT-BACKUP
# ==========
# Find git repos and create timestamped tar.gz-archives.
# Written by Jonas Sj√∂berg in 2015. <jonasjberg@github.com>

# USER-DEFINED VARIABLES
COMPRESSCMD='tar czf'
TIMESTAMP="$(date +%F_%H-%M-%S)"
LOGFILE="./backups/log"
VERBOSE=true

# ------------------------------------------------------------------------------

set -e                         # Exit immediately if a command returns non-zero.

THIS_PROGRAM_NAME=$(basename $0)
THIS_PROGRAM_PATH=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# Print size in SI-bytes
get_size()
{
    du -hs ${1} | cut -f1
}

# Print info to stdout
print_info()
{
    if [[ $VERBOSE ]]; then
        printf "%s\n" "$1"
    fi
}

# Append to logfile
log_append()
{
    if [[ ! -f "${LOGFILE}" ]]; then
        print_info "Creating log file"
        touch "${LOGFILE}"
    fi

    if [[ -w "${LOGFILE}" ]]; then
        printf "%s\n" "$1" >> ${LOGFILE}
    else
        die "Can't write to log file!"
    fi
}

# Append to logfile and print info to stdout
print_and_log()
{
    print_info "$1"
    log_append "$1"
}

# Print error and exit.
die()
{
    if [[ ! -z "$1" ]]; then
        printf "[!] ERROR: %s\n" "$1" 1>&2
    fi
    exit 1
}


mkdir -pv backups

log_append "____________________________________________________________"
log_append "$(date +%F\ %H:%M:%S)"
log_append "Log entry by executable "${THIS_PROGRAM_NAME}""
log_append "Backup started by "$(whoami)" from host "${HOSTNAME}""
log_append "Current directory is "${THIS_PROGRAM_PATH}""
log_append ""

for dir in $(find . -type d -name ".git" -printf '%P\n');
do
    this_repo="${dir%/*}"
    this_archive_name="${this_repo}_${TIMESTAMP}.tar.gz"

    print_and_log "[*] Found git repository $this_repo"
    print_and_log "    uncompressed size: $(get_size ${this_repo})"

    print_info "    archiving .."

    if $COMPRESSCMD "${this_archive_name}" "${this_repo}" ; then
        print_info "    DONE!"
        print_and_log "    compressed size: $(get_size "${this_archive_name}")"

        print_info "    Moving to ./backups .."
        mv -n "${this_archive_name}" ./backups
    else
        log_append "ERROR: ARCHIVING FAILED!"
        die "ARCHIVING FAILED!"
    fi
done

log_append ""
print_and_log "Done creating backups .."
exit 0
