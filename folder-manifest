#!/bin/bash
# Generate folder manifest
# First written in 2015-05-10 by Jonas Sjöberg
# Last updated 2015-06-27

# Generates a txt file with the current directory path and contents.
# Created for dealing with Eagle backup-files (#00, #01, etc.) that are to be
# compressed to a .tar.gz or .tar.bz2 -archive.
# ------------------------------------------------------------------------------

# USER-DEFINED VARIABLES
# ==============================================================================
# Set the manifest filename
MANIFEST_FILENAME="manifest.lst"


# ------------------------------------------------------------------------------

THIS_PROGRAM_NAME=$(basename $0)
THIS_PROGRAM_PATH=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

TEMPORARY1=$(mktemp /tmp/manifest.XXXXXX)

# generate_manifest() does the actual file creation
generate_manifest(){
path_logical="$(cd $THIS_WORKING_PATH && pwd -L)"
path_physical="$(cd $THIS_WORKING_PATH && pwd -P)"

cat << EOF > "${TEMPORARY1}"
Folder manifest generated $(date +%F\ %H:%M:%S)
---------------------------------------------

Current logical path:  ${path_logical}
Current physical path: ${path_physical}

Folder listing:

EOF

# use '¤' as field separator for columnating later on .. 
printf "PERMISSIONS¤#¤OWNER¤GROUP¤SIZE¤LAST MODIFIED¤NAME¤MIME FILE TYPE\n" >> ${TEMPORARY1}

for f in ${THIS_WORKING_PATH}/*; do
    stat --printf="%A¤%h¤%U¤%G¤%s¤%y¤%n¤" "${f}" >> ${TEMPORARY1}
    file -b "${f}" >> ${TEMPORARY1}
    printf "\n" >> ${TEMPORARY1}
done

# line up in columns using '¤' to delimit columns for the '-t' option
if [[ $GENERATE_FILE ]]; then
    cat ${TEMPORARY1} | column -t -s '¤'
else
    cat ${TEMPORARY1} | column -t -s '¤' > "${FULL_MANIFEST_PATH}"
fi
}

# ------------------------------------------------------------------------------
# "main function"
# check whether the first parameter is a directory
if [[ -d "$@" ]]; then
    # OK! Our first parameter is a directory. Set working path.
    THIS_WORKING_PATH="$@"
    # Set manifest file destination relative to working path..
    FULL_MANIFEST_PATH="${THIS_WORKING_PATH}/${MANIFEST_FILENAME}"

    # Make sure we can write to the working path.
    if [[ -w "${THIS_WORKING_PATH}" ]]; then
        # Make sure files doesn't already exist
        if [[ ! -e ${FULL_MANIFEST_PATH} ]]; then
            generate_manifest
            exit 0
        else
            # Display error and die
            echo "File exists! Aborting .." >&2
            exit 1
        fi
    else
        # Display error and die
        echo "Error! Need write permissions for "${THIS_WORKING_PATH}"!" >&2
        exit 1
    fi
else
    # Display usage and die
    echo "Usage: ${THIS_PROGRAM_NAME} <directory>" >&2
    exit 1
fi

